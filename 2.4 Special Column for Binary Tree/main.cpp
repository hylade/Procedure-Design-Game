#include <iostream>
using namespace std;
/*
若想二叉树插入节点，分别为 1, 2, 3, 4, 5...
那么二叉树将像链条一般（各个节点都只有右子树），树的高度将变为 n ，所有操作将需要 O(n) 时间完成
那么所有操作本该是 O(logn) 时间的二叉搜索树变成了 O(n) ，复杂度完全不同

此时需要使用二叉平衡树，即使用旋转的方法，避免上述情况的发生
1. 左左情况（左子树的左边节点）
整体向右旋转
2. 右右情况（右子树的右边节点）
整体向左旋转
3. 左右情况（左子树的右边节点）
先对左子树进行右右旋转，再整体进行左左旋转
4. 右左情况（右子树的左边节点）
先对右子树进行左左旋转，再整体进行右右旋转

// 旋转后，由于根节点发生变化，故新的根节点的子树需要按照旋转方向添加到相应节点的子树上
*/
int main()
{
    cout << "Hello world!" << endl;
    return 0;
}
